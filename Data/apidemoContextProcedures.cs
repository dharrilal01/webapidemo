// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using apidemoproj.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace apidemoproj.Data
{
    public partial class apidemoContext
    {
        private IapidemoContextProcedures _procedures;

        public virtual IapidemoContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new apidemoContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IapidemoContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
        }
    }

    public partial class apidemoContextProcedures : IapidemoContextProcedures
    {
        private readonly apidemoContext _context;

        public apidemoContextProcedures(apidemoContext context)
        {
            _context = context;
        }

        public virtual async Task<int> uspLogErrorAsync(OutputParameter<int?> ErrorLogID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorLogID = new SqlParameter
            {
                ParameterName = "ErrorLogID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorLogID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterErrorLogID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[uspLogError] @ErrorLogID OUTPUT", sqlParameters, cancellationToken);

            ErrorLogID.SetValue(parameterErrorLogID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspPrintErrorAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[uspPrintError]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
